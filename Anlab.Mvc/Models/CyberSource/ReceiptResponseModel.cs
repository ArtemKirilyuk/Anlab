using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading.Tasks;

namespace AnlabMvc.Models.CyberSource
{
    /*
     * Posted Model from CyberSource
     * Req_ Fields are returned request values. 
     * These values were generated by the payment request and are returned for information
     * */
    public class ReceiptResponseModel //Copied from Give, then deleted fields that were obviously not applicable
    {
        // Transaction/Reply Info

        /// <summary>
        /// Payment Authorization Decision
        /// see CyberSourceReplyCodes
        /// </summary>
        public string Decision { get; set; }
        /// <summary>
        /// Payment Decision Reason
        /// see CyberSourceReasonCodes
        /// </summary>
        public int Reason_Code { get; set; }
        /// <summary>
        /// Human readable message for Reason_Code
        /// </summary>
        public string Message { get; set; }
        /// <summary>
        /// List of fields that are missing
        /// </summary>
        public string Required_Fields { get; set; }
        /// <summary>
        /// List of fields that did not validate
        /// </summary>
        public string Invalid_Fields { get; set; }

        /// <summary>
        /// Short Reply Code returned by processor (Chase/Visa/Etc) authorizing payment
        /// </summary>
        public string Auth_Code { get; set; }
        public string Auth_Avs_Code { get; set; }
        public string Auth_Avs_Code_Raw { get; set; }
        public string Auth_Cv_Result { get; set; }
        public string Auth_Cv_Result_Raw { get; set; }
        public string Auth_Response { get; set; }
        /// <summary>
        /// Payment Processor (Chase/Visa/Etc) Authorization Transaction Id
        /// Generated by Processor, passed through from CyberSource
        /// </summary>
        public string Auth_Trans_Ref_No { get; set; }
        /// <summary>
        /// Payment Processor Authorization Time
        /// format: yyyy-MM-ddTHHmmssZ
        /// Note lack of : in time field
        /// </summary>
        public string Auth_Time { get; set; }
        public DateTime AuthorizationDateTime
        {
            get
            {
                DateTime date;
                if (DateTime.TryParseExact(Auth_Time, "yyyy-MM-ddTHHmmssZ", new DateTimeFormatInfo(), DateTimeStyles.None, out date))
                {
                    return date.ToUniversalTime();
                }
                else
                {
                    return DateTime.UtcNow;
                }
            }
        }

        /// <summary>
        /// Payment Processor (Chase/Visa/Etc) Sale/Bill Transaction Id
        /// Generated by Processor, passed through from CyberSource
        /// </summary>
        public string Bill_Trans_Ref_No { get; set; }

        /// <summary>
        /// Order Number, generated by the application
        /// </summary>
        public int Req_Reference_Number { get; set; }
        /// <summary>
        /// Payment Gateway Transaction Id
        /// Generated by CyberSource
        /// </summary>
        public string Transaction_Id { get; set; }
        /// <summary>
        /// Also called Subscription Id
        /// Can be used to recharge customer
        /// </summary>
        public string Payment_Token { get; set; }

        // Payment Info

        /// <summary>
        /// Actual One-time authorized amount
        /// Zero on Recurring (if no setup-fee)
        /// Notice: Can be less than Req_Amount
        /// </summary>
        public decimal Auth_Amount { get; set; }
        /// <summary>
        /// Request Currancy Code, "USD"
        /// </summary>
        public string Req_Currency { get; set; }
        /// <summary>
        /// Request Payment Method, "card"
        /// </summary>
        public string Req_Payment_Method { get; set; }
        /// <summary>
        /// Requested Payment Amount
        /// </summary>
        public decimal Amount
        {
            get { return IsRecurring ? Req_Recurring_Amount : Req_Amount; }
        }
        public bool IsRecurring { get { return !string.IsNullOrWhiteSpace(Req_Recurring_Frequency); } }
        /// <summary>
        /// Requested Charge Amount
        /// Zero on Recurring (if no setup-fee)
        /// </summary>
        public decimal Req_Amount { get; set; }
        /// <summary>
        /// Requested Subscription Amount
        /// Zero on One-Time
        /// </summary>
        public decimal Req_Recurring_Amount { get; set; }
        /// <summary>
        /// Requested Subscription Frequency
        /// Empty on One-Time
        /// "monthly", "annually"
        /// </summary>
        public string Req_Recurring_Frequency { get; set; }
        /// <summary>
        /// Requested Transaction Type/Action
        /// One-time: authorization or sale
        /// Recurring: authorization,create_payment_token or sale,create_payment_token
        /// </summary>
        public string Req_Transaction_Type { get; set; }

        public string Req_Payment_Token_Comments { get; set; }

        // Donor Info
        public string Req_Bill_To_Forename { get; set; }
        public string Req_Bill_To_Surname { get; set; }
        public string Req_Bill_To_Email { get; set; }
        public string Req_Bill_To_Phone { get; set; }

        // Masked Card Info
        public string Req_Card_Type { get; set; }
        public string Req_Card_Number { get; set; }
        public string Req_Card_Expiry_Date { get; set; }

        public DateTime? CardExpiration
        {
            get
            {
                DateTime date;
                if (DateTime.TryParseExact(Req_Card_Expiry_Date, "MM-yyyy", new DateTimeFormatInfo(), DateTimeStyles.None, out date))
                {
                    return date.ToUniversalTime();
                }
                else if (DateTime.TryParseExact(Req_Card_Expiry_Date, "MM-yy", new DateTimeFormatInfo(), DateTimeStyles.None, out date))
                {
                    return date.ToUniversalTime();
                }
                return null;
            }
        }

        // Address Info
        public string Req_Bill_To_Address_Line1 { get; set; }
        public string Req_Bill_To_Address_City { get; set; }
        public string Req_Bill_To_Address_State { get; set; }
        public string Req_Bill_To_Address_Postal_Code { get; set; }
        public string Req_Bill_To_Address_Country { get; set; }

        // Line Item Info
        public string Req_Line_Item_Count { get; set; }
        public string Req_Item_0_Code { get; set; }
        public string Req_Item_0_Name { get; set; }
        public string Req_Item_0_Quantity { get; set; }
        public string Req_Item_0_Sku { get; set; }
        public string Req_Item_0_Unit_Price { get; set; }

        // Etc
        public string Req_Access_Key { get; set; }
        public string Req_Locale { get; set; }
        public string Req_Profile_Id { get; set; }
        /// <summary>
        /// One-time guid for this transaction request. EVERY request (even retry's) must have a unique id.
        /// </summary>
        public Guid Req_Transaction_UUID { get; set; }

        // Signature Info
        public string Signed_Field_Names { get; set; }
        public string Signature { get; set; }
        public string Signed_Date_Time { get; set; }

        public Dictionary<string, string> GetAsDictionary()
        {
            return new Dictionary<string, string>()
            {
                {"transaction_id"                                                 , Transaction_Id},
                {"payment_token"                                                  , Payment_Token},
                {"req_access_key"                                                 , Req_Access_Key},
                {"req_profile_id"                                                 , Req_Profile_Id},
                {"req_transaction_uuid"                                           , Req_Transaction_UUID.ToString()},
                {"req_transaction_type"                                           , Req_Transaction_Type},
                {"req_reference_number"                                           , Req_Reference_Number.ToString()},
                {"req_locale"                                                     , Req_Locale},
                {"req_bill_to_forename"                                           , Req_Bill_To_Forename},
                {"req_bill_to_surname"                                            , Req_Bill_To_Surname},
                {"req_bill_to_email"                                              , Req_Bill_To_Email},
                {"req_bill_to_phone"                                              , Req_Bill_To_Phone},
                {"req_bill_to_address_line1"                                      , Req_Bill_To_Address_Line1},
                {"req_bill_to_address_city"                                       , Req_Bill_To_Address_City},
                {"req_bill_to_address_state"                                      , Req_Bill_To_Address_State},
                {"req_bill_to_address_postal_code"                                , Req_Bill_To_Address_Postal_Code},
                {"req_bill_to_address_country"                                    , Req_Bill_To_Address_Country},
                {"req_payment_method"                                             , Req_Payment_Method},
                {"req_currency"                                                   , Req_Currency},
                {"req_line_item_count"                                            , Req_Line_Item_Count},
                {"req_item_0_code"                                                , Req_Item_0_Code},
                {"req_item_0_name"                                                , Req_Item_0_Name},
                {"req_item_0_quantity"                                            , Req_Item_0_Quantity},
                {"req_item_0_sku"                                                 , Req_Item_0_Sku},
                {"req_item_0_unit_price"                                          , Req_Item_0_Unit_Price},
                {"req_amount"                                                     , Req_Amount.ToString(CultureInfo.InvariantCulture)},
                {"req_recurring_amount"                                           , Req_Recurring_Amount.ToString(CultureInfo.InvariantCulture)},
                {"req_recurring_frequency"                                        , Req_Recurring_Frequency},
                {"req_payment_token_comments"                                     , Req_Payment_Token_Comments},
                {"req_card_number"                                                , Req_Card_Number},
                {"req_card_type"                                                  , Req_Card_Type},
                {"req_card_expiry_date"                                           , Req_Card_Expiry_Date},       
                {"decision"                                                       , Decision},
                {"message"                                                        , Message},
                {"reason_code"                                                    , Reason_Code.ToString(CultureInfo.InvariantCulture)},
                {"required_fields"                                                , Required_Fields},
                {"invalid_fields"                                                 , Invalid_Fields},
                {"auth_avs_code"                                                  , Auth_Avs_Code},
                {"auth_avs_code_raw"                                              , Auth_Avs_Code_Raw},
                {"auth_cv_result"                                                 , Auth_Cv_Result},
                {"auth_cv_result_raw"                                             , Auth_Cv_Result_Raw},
                {"auth_response"                                                  , Auth_Response},
                {"auth_amount"                                                    , Auth_Amount.ToString(CultureInfo.InvariantCulture)},
                {"auth_code"                                                      , Auth_Code},
                {"auth_trans_ref_no"                                              , Auth_Trans_Ref_No},
                {"bill_trans_ref_no"                                              , Bill_Trans_Ref_No},
                {"auth_time"                                                      , Auth_Time},
                {"signed_field_names"                                             , Signed_Field_Names},
                {"signed_date_time"                                               , Signed_Date_Time}
            };
        }
    }
}
